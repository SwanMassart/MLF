# -*- coding: utf-8 -*-
"""
Created on Tue Mar 25 08:58:43 2025

@author: Swan
"""

from tensorflow import keras
from keras.models import Sequential
from keras.datasets import mnist
import numpy as np
import matplotlib
import matplotlib.pyplot as plt
from tensorflow.keras.layers import Conv2D, MaxPooling2D, Flatten, Dense, Dropout
from tensorflow.keras.utils import to_categorical
from tensorflow.keras.optimizers import Adam
from keras.regularizers import l2
from keras.optimizers import SGD
from keras.callbacks import EarlyStopping
from sklearn.metrics import confusion_matrix, ConfusionMatrixDisplay


(X_train, y_train), (X_test, y_test) = mnist.load_data()

def display_random_images(x_data: np.array, y_data: np.array, count: int = 10) -> None:
  index = np.array(len(x_data))
  selected_ind = np.random.choice(index, count)

  selected_img = x_data[selected_ind]
  selected_labels = y_data[selected_ind]
  concat_img = np.concatenate(selected_img, axis=1)

  plt.figure(figsize=(20,10))
  plt.imshow(concat_img, cmap="gray")

  for id_label, label in enumerate(selected_labels):
    plt.text(14 + 28*id_label, 28*(5/4), label)
  plt.axis('off')
  plt.show()
  
#display_random_images(X_train, y_train)


print(X_train.shape)
print(X_test.shape)


X_train = X_train.astype('float32') / 255.0
X_test=X_test.astype('float32')/255.0


X_train= X_train.reshape(-1,28,28,1)
X_test = X_test.reshape(-1,28,28,1)


y_test = to_categorical(y_test,num_classes=10)
y_train = to_categorical(y_train, num_classes=10)





######MODEL#############################################
model = Sequential()

model.add(Conv2D(16, kernel_size=(3,3), activation='relu', input_shape=(28,28,1)))
model.add(MaxPooling2D(pool_size=(2,2)))

model.add(Flatten(input_shape=(28, 28, 1)))
model.add(Dense(256, activation='relu', kernel_regularizer=l2(0.001)))
model.add(Dropout(0.3))
model.add(Dense(128, activation='relu', kernel_regularizer=l2(0.001)))  # Nouvelle couche
model.add(Dropout(0.3))
model.add(Dense(10, activation='softmax'))


#optimizer = SGD(learning_rate = 0.05)
optimizer= Adam(learning_rate =0.001)
model.summary()
model.compile(loss='categorical_crossentropy', optimizer=optimizer, metrics=['accuracy'])


#######MODEL####################

#############Training##########
early_stopping = EarlyStopping(monitor='val_loss', patience=3)
history = model.fit(X_train, y_train, epochs=10, batch_size=128, validation_data = (X_test,y_test),callbacks=[early_stopping])

score = model.evaluate(X_test, y_test, verbose=0)
print('Test loss:', score[0])
print(f'Test accuracy: {score[1]*100} %')

plt.plot(history.history['loss'])
plt.plot(history.history['val_loss'])

plt.figure()
plt.plot(history.history['accuracy'])
plt.plot(history.history['val_accuracy'])

# Prédictions sur le jeu de test
y_pred_probs = model.predict(X_test)
y_pred = np.argmax(y_pred_probs, axis=1)  # classes prédites
y_true = np.argmax(y_test, axis=1)        # vraies classes

# Matrice de confusion
cm = confusion_matrix(y_true, y_pred)
disp = ConfusionMatrixDisplay(confusion_matrix=cm, display_labels=np.arange(10))

# Affichage
plt.figure(figsize=(8, 6))
disp.plot(cmap=plt.cm.Blues)
plt.title("Confusion Matrix")
plt.show()

