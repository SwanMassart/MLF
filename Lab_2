# -*- coding: utf-8 -*-
"""
Created on Tue Mar  4 09:09:10 2025

@author: Swan
"""

import matplotlib.pyplot as plt
import copy
import numpy as np
from numpy.linalg import norm
from sklearn.cluster import KMeans


loaded_points = np.load('Data/k_mean_points.npy')

plt.figure()
plt.scatter(loaded_points[:,0],loaded_points[:,1])

k = 3

def initialize_clusters(points: np.ndarray, k_clusters: int) -> np.ndarray:
    """
    Initializes and returns k random centroids from the given dataset.

    :param points: Array of data points.
    :type: points ndarray with shape (n, 2)
    
    :param k_clusters: The number of clusters to form
    :type k_clusters: int 

    :return: initial_clusters
    initial_clusters: Array of initialized centroids

    :rtype:
    initial_clusters: np.array (k_clusters, 2)
    """
    
    ###################################
    # Write your own code here #
    indices = np.random.choice(points.shape[0], k_clusters, replace=False)
    initial_clusters = points[indices]
    ###################################
    
    return initial_clusters


def calculate_metric(points: np.ndarray, centroid: np.ndarray) -> np.ndarray:
    """
    Calculates the distance metric between each point and a given centroid.

    Parameters:
    :param points: Array of n data points.
    :type points: ndarray with shape (n, 2)
    
    :param centroid: A single centroid
    :type centroid: ndarray with shape (1, 2)

    :return: distances_array
    distances_array: Array of distances from point to centroid

    :rtype:
    distances_array: ndarray with shape (n,)
    :
    """

    ###################################
    # Write your own code here #
    distances_array = np.linalg.norm(points - centroid, axis=1)
    ###################################
    
    return distances_array



def compute_distances(points: np.ndarray, centroids_points: np.ndarray) -> np.ndarray:
    """
    Computes and returns the distance from each point to each centroid.

    Parameters:
    :param points: Array of n data points.
    :type points: ndarray with shape (n, 2)

    :param centroids_points: A all centroid points
    :type centroids_points: ndarray with shape (k_clusters, 2)
    

    :return: distances_array
    distances_array: 2D array with distances of each point to each centroid.

    :rtype:
    distances_array: ndarray of shape (k_clusters, n)
    """
    ###################################
    # Write your own code here #
    distances_array = np.linalg.norm(points[:, np.newaxis, :] - centroids_points, axis=2).T
    ###################################
    
    return distances_array


def assign_centroids(distances: np.ndarray) -> np.ndarray:
    """
    Assigns each point to the closest centroid based on the distances.

    Parameters:
    :param distances: 2D array with distances of each point to each centroid.
    :type distances: ndarray with shape (k_clusters, n)

    :return: assigned_clusters
    assigned_clusters: Array indicating the closest centroid for each data point.

    :rtype:
    assigned_centroids: ndarray with shape (1, n) and dtype = np.int32
    """

    ###################################
    # Write your own code here #
    assigned_centroids = np.argmin(distances, axis=0).reshape(1, -1).astype(np.int32)
    ###################################
    
    return assigned_centroids




def calculate_objective(assigned_centroids: np.ndarray, distances: np.ndarray) -> np.float32:
    """
    Calculates and returns the objective function value for the clustering.

    Parameters:
    :param assigned_centroids: Array indicating the cluster assignment for each point.
    :type assigned_centroids: ndarray with shape (1, n) and dtype = np.int64
    
    :param distances: 2D array with distances of each point to each centroid
    :type distances: ndarray with shape (k_clusters, n) and dtype = np.float64

    :return: objective_function_value
    objective_function_value: Objective function value.

    :rtype:
    objective_function_value: float32
    """

    ###################################
    # Write your own code here #
    objective_function_value = np.sum(distances[assigned_centroids, np.arange(distances.shape[1])]).astype(np.float32)
    ###################################
    
    return objective_function_value




def calculate_new_centroids(points: np.ndarray, assigned_centroids: np.ndarray, k_clusters: int) -> np.ndarray:
    """
    Computes new centroids based on the current cluster assignments.

    Parameters:
    :param points: Array of n data points.
    :type points: ndarray with shape (n, 2)

    :param assigned_centroids: Array indicating the closest centroid for each data point.
    :type assigned_centroids: ndarray with shape (1, n) and dtype = np.int32

    :param k_clusters: Number of clusters.
    :type k_clusters: int

    :return: new_clusters
    new_clusters: new cluster points

    :rtype:
    new_clusters: ndarray with shape (k_clusters, 2) and dtype = np.float32
    """

    ###################################
    # Write your own code here #
    new_clusters = np.array([points[assigned_centroids.flatten() == k].mean(axis=0) for k in range(k_clusters)], dtype=np.float32)
    ###################################
    
    return new_clusters

def fit(points: np.ndarray, k_clusters: int, n_of_oterations: int, error: float = 0.001) -> tuple:
    """
    Fits the k-means clustering model on the dataset.

    Parameters:
    :param points : Array of data points.
    :type points: ndarray with shape (n, 2) and dtype = np.float32

    :param k_clusters:  Number of clusters
    :type k_clusters: int

    :param n_of_oterations:  Maximum number of iterations
    :type n_of_oterations: int

    :param error: Threshold for convergence.
    :type error: float

    :return: centroid_points, last_objective
    centroid_points: final centroid points
    last_objective: final objective function

    :rtype:
    centroid_points: ndarray with shape (k_clusters, 2) and dtype = np.float32
    last_objective: float
    """

    ###################################
    # Write your own code here #
    centroid_points = initialize_clusters(points, k_clusters)
    last_objective = np.inf  # Start with a high objective function value

    for _ in range(n_of_oterations):
        
        distances = compute_distances(points, centroid_points)

      
        assigned_centroids = assign_centroids(distances)

        
        new_centroids = calculate_new_centroids(points, assigned_centroids, k_clusters)

        
        new_objective = calculate_objective(assigned_centroids, distances)

        
        if abs(last_objective - new_objective) < error:
            break

        
        centroid_points = new_centroids
        last_objective = new_objective
    ###################################
    
    return centroid_points.astype(np.float32), last_objective



k_all = range(2, 10)
all_objective = []

for k in k_all:
    _, objective_value = fit(loaded_points, k, n_of_oterations=100)  # Correction ici
    all_objective.append(objective_value)  # Stocke la valeur de la fonction objectif




plt.figure()
plt.plot(k_all, all_objective, marker='o', linestyle='-')  # Ajout des marqueurs pour mieux voir les points
plt.xlabel('K clusters')
plt.ylabel('Sum of squared distance')
plt.title('Elbow Method for Optimal k')
plt.grid(True)
plt.show()
plt.figure()

from matplotlib.image import imread



loaded_image = imread('Data/fish.jpg')

plt.imshow(loaded_image)
plt.show()
plt.figure()





def compress_image(image: np.ndarray, number_of_colours: int) -> np.ndarray:
    """
    Compresses the given image by reducing the number of colours used in the image.
    
    This function applies k-means clustering to group the pixel colours of the image
    into 'number_of_colours' clusters. Each pixel's colour in the image is then replaced
    with the colour of the closest centroid of these clusters. This process effectively
    reduces the number of colours in the image, resulting in compression.

    Parameters:
    image (np.array): The original image is represented as a 3D numpy array 
                      (height x width x color_channels).
    number_of_colours (int): The number of colours to reduce the image to.

    Returns:
    np.array: The compressed image as a numpy array in the same shape as the input.
    """

    ###################################
    # Reshape image to a 2D array where each row is a pixel with (R, G, B)
    h, w, c = image.shape
    pixels = image.reshape(-1, c).astype(np.float32)

    # Apply K-means clustering
    kmeans = KMeans(n_clusters=number_of_colours, random_state=42, n_init=10)
    kmeans.fit(pixels)

    # Replace each pixel with the closest centroid (compressed colours)
    compressed_pixels = kmeans.cluster_centers_[kmeans.labels_].astype(np.uint8)

    # Reshape back to original image shape
    compressed_image = compressed_pixels.reshape(h, w, c)

    ###################################
    
    return compressed_image

img = compress_image(loaded_image, 30)

plt.imshow(img)
plt.show()
